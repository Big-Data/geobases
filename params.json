{"tagline":"Data services and visualization","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"GeoBases","body":"GeoBases\r\n========\r\n\r\nIntroduction\r\n------------\r\n\r\nThis module is a general class *GeoBase* to manipulate geographical\r\ndata. It loads static csv files containing data about airports or train\r\nstations, and then provides tools to play with it. This is entirely\r\nwritten in Python.\r\n\r\nIt relies on three other modules:\r\n\r\n-   *GeoUtils*: to compute haversine distances between points\r\n-   *LevenshteinUtils*: to calculate distances between strings. Indeed,\r\n    we need a good tool to do it, in order to recognize things like\r\n    station names in schedule files where we do not have the station id\r\n-   *GeoGridModule*: a class implementing a geographical index based on\r\n    geohashing\r\n\r\nProject\r\n-------\r\n\r\n### Prerequisites\r\n\r\nThese prerequisites are very standard packages which are often installed\r\nby default on Linux distributions. But make sure you have them anyway.\r\n\r\nFirst you need to install *setuptools*:\r\n\r\n    # apt-get install python-setuptools    # for debian\r\n    # yum install python-setuptools.noarch # for fedora\r\n\r\nThen you need some basics compilation stuff to compile dependencies:\r\n\r\n    # apt-get install python-dev g++    # for debian\r\n    # yum install python-devel gcc-c++  # for fedora\r\n\r\n### Installation\r\n\r\nTo clone the project from\r\n[github](https://github.com/opentraveldata/geobases.git):\r\n\r\n    % git clone https://github.com/opentraveldata/geobases.git\r\n\r\nThen install the package:\r\n\r\n    % cd geobases\r\n    % python setup.py install --user\r\n\r\nThis should install some dependencies.\r\n\r\nA standalone script is put in `~/.local/bin`, to benefit from it, put\r\nthat in your `~/.bashrc` or `~/.zshrc`:\r\n\r\n    export PATH=$PATH:$HOME/.local/bin\r\n    export BACKGROUND_COLOR=black # or 'white', depending on your terminal configuration\r\n\r\nIf you use zsh and want to benefit from the *autocomplete*, add this to\r\nyour `~/.zshrc`:\r\n\r\n    # Add custom completion scripts\r\n    fpath=(~/.zsh/completion $fpath)\r\n    autoload -U compinit\r\n    compinit\r\n\r\nTests\r\n-----\r\n\r\nYou may try to run the tests with:\r\n\r\n    % find ./ -name '*.pyc' -exec rm {} \\;\r\n    % python test/test_GeoBases.py -v\r\n\r\nQuickstart\r\n----------\r\n\r\nTo load the class, just import the main class with:\r\n\r\n    % python\r\n    >>> from GeoBases import GeoBase\r\n    >>> geo_o = GeoBase(data='ori_por', verbose=False)\r\n    >>> geo_a = GeoBase(data='airports', verbose=False)\r\n    >>> geo_t = GeoBase(data='stations', verbose=False)\r\n\r\nYou may provide other values than *data=\"ori\\_por\"*,\r\n*data=\"airports\\_csv\"* or *data=\"stations\"*. Here is an overview:\r\n\r\n-   *data=\"ori\\_por\"* will load a local version of this\r\n    [file](https://github.com/opentraveldata/optd/raw/trunk/refdata/ORI/ori_por_public.csv)\r\n-   *data=\"ori\\_por\\_multi\"* is the same as previous, but the key for a\r\n    line is not the iata\\_code, but the concatenation of iata\\_code and\r\n    location\\_type. This feature makes every line unique, whereas\r\n    *ori\\_por* may have several lines for one iata\\_code, and duplicates\r\n    are dropped. \\_\\_id\\_\\_ is the special field containing the key.\r\n-   *data=\"airports\"* will use geonames as data source for airports\r\n-   *data=\"airports\\_csv\"* will use an airports data source\r\n-   *data=\"stations\"* will use RFF data, from [the open data\r\n    website](http://www.data.gouv.fr), as data source for french train\r\n    stations\r\n-   *data=\"stations\\_nls\"* will use NLS nomenclature as data source for\r\n    french train stations\r\n-   *data=\"stations\\_uic\"* will use UIC nomenclature as data source for\r\n    french train stations\r\n-   *data=\"countries\"* will load data on countries\r\n-   *data=\"capitals\"* will load data on countries capitals\r\n-   *data=\"continents\"* will load data on continents\r\n-   *data=\"timezones\"* will load data on timezones\r\n-   *data=\"languages\"* will load data on languages\r\n-   *data=\"cities\"* will load data on cities, extracted from geonames\r\n-   *data=\"currencies\"* will load data on currencies, extracted from\r\n    wikipedia\r\n-   *data=\"airlines\"* will load data on airlines, extracted from\r\n    this [file](https://raw.github.com/opentraveldata/optd/trunk/refdata/ORI/ori_airlines.csv)\r\n-   *data=\"cabins\"* will load data on cabins\r\n-   *data=\"regions\"* will load data on regions\r\n-   *data=\"locales\"* will load data on locales\r\n-   *data=\"location\\_types\"* will load data on location types\r\n-   *data=\"feature\\_classes\"* will load data on feature classes\r\n-   *data=\"feature\\_codes\"* will load data on feature codes\r\n-   *data=\"ori\\_por\\_non\\_iata\"* will load some non-iata data excluded\r\n    from *ori\\_por*\r\n-   *data=\"geonames\\_MC\"* will load MC data of geonames\r\n-   *data=\"geonames\\_FR\"* will load FR data of geonames\r\n-   *data=\"postal\\_codes\\_MC\"* will load MC postal codes data\r\n-   *data=\"postal\\_codes\\_FR\"* will load FR postal codes data\r\n-   *data=\"feed\"* will create an empty instance\r\n\r\nAll features are then data independent, and are available as long as\r\ngeocodes are included in the data sources (which is not the case for\r\ncountries or NLS nomenclature).\r\n\r\nFeatures\r\n--------\r\n\r\n### Information access\r\n\r\n    >>> geo_a.get('CDG', 'city_code')\r\n    'PAR'\r\n    >>> geo_a.get('BRU', 'name')\r\n    'Bruxelles National'\r\n    >>> geo_t.get('frnic', 'name')\r\n    'Nice-Ville'\r\n    >>>\r\n    >>> geo_t.get('frnic', 'not_a_field')\r\n    Traceback (most recent call last):\r\n    KeyError: \"Field 'not_a_field' [for key 'frnic'] not in ['info', 'code', 'name', 'lines@raw', 'lines', '__gar__', '__par__', '__dup__', '__key__', 'lat', 'lng', '__lno__']\"\r\n    >>> geo_t.get('fr_not_exist', 'name', default='NAME')\r\n    'NAME'\r\n\r\n### Find airports with properties\r\n\r\n    >>> conditions = [('city_code', 'PAR'), ('location_type', 'H')]\r\n    >>> list(geo_o.getKeysWhere(conditions, mode='and'))\r\n    ['JDP', 'JPU']\r\n    >>> conditions = [('city_code', 'PAR'), ('city_code', 'LON')]\r\n    >>> len(list(geo_o.getKeysWhere(conditions, mode='or')))\r\n    36\r\n\r\n### Distance calculation\r\n\r\n    >>> geo_a.distance('CDG', 'NCE')\r\n    694.5162...\r\n\r\n### Find airports near a point\r\n\r\n    >>> # Paris, airports <= 50km\r\n    >>> [geo_a.get(k, 'name') for d, k in sorted(geo_a.findNearPoint((48.84, 2.367), 50))]\r\n    ['Paris-Orly', 'Paris-Le Bourget', 'Toussus-le-Noble', 'Paris - Charles-de-Gaulle']\r\n    >>>\r\n    >>> # Nice, stations <= 5km\r\n    >>> [geo_t.get(k, 'name') for d, k in sorted(geo_t.findNearPoint((43.70, 7.26), 5))]\r\n    ['Nice-Ville', 'Nice-Riquier', 'Nice-St-Roch', 'Villefranche-sur-Mer', 'Nice-St-Augustin']\r\n\r\n### Find airports near a key\r\n\r\n    >>> sorted(geo_a.findNearKey('ORY', 50)) # Orly, airports <= 50km\r\n    [(0.0, 'ORY'), (18.8..., 'TNF'), (27.8..., 'LBG'), (34.8..., 'CDG')]\r\n    >>> sorted(geo_t.findNearKey('frnic', 5)) # Nice station, stations <= 5km\r\n    [(0.0, 'frnic'), (2.2..., 'fr4342'), (2.3..., 'fr5737'), (4.1..., 'fr4708'), (4.5..., 'fr6017')]\r\n\r\n### Find closest airports from a point\r\n\r\n    >>> list(geo_a.findClosestFromPoint((43.70, 7.26))) # Nice\r\n    [(5.82..., 'NCE')]\r\n    >>> list(geo_a.findClosestFromPoint((43.70, 7.26), N=3)) # Nice\r\n    [(5.82..., 'NCE'), (30.28..., 'CEQ'), (79.71..., 'ALL')]\r\n    >>> list(geo_t.findClosestFromPoint((43.70, 7.26), N=1)) # Nice\r\n    [(0.56..., 'frnic')]\r\n    >>> list(geo_t.findClosestFromPoint((43.70, 7.26), N=2, from_keys=('frpaz', 'frply', 'frbve'))) # Nice\r\n    [(482.84..., 'frbve'), (683.89..., 'frpaz')]\r\n\r\n### Approximate name matching\r\n\r\n    >>> geo_t.fuzzyGet('Marseille Charles', 'name')[0]\r\n    (0.8..., 'frmsc')\r\n    >>> geo_a.fuzzyGet('paris de gaulle', 'name')[0]\r\n    (0.78..., 'CDG')\r\n    >>> geo_a.fuzzyGet('paris de gaulle', 'name', approximate=3)\r\n    [(0.78..., 'CDG')]\r\n    >>> geo_t.fuzzyGetCached('Marseille Saint Ch.', 'name')[0] # Cached for further calls\r\n    (0.8..., 'frmsc')\r\n\r\n### Map display\r\n\r\n    >>> geo_t.visualize()\r\n    * Added lines for duplicates linking, total 0\r\n    > Affecting category None     to color blue    | volume 3190\r\n    <BLANKLINE>\r\n    * Now you may use your browser to visualize:\r\n    example_map.html example_table.html\r\n    <BLANKLINE>\r\n    * If you want to clean the temporary files:\r\n    rm example.json ...\r\n    <BLANKLINE>\r\n    (['example_map.html', 'example_table.html'], 2)\r\n\r\n![image](https://raw.github.com/opentraveldata/geobases/public/examples/GeoBases-map.png)\r\n\r\nStandalone script\r\n-----------------\r\n\r\nInstallation of the package will also deploy a standalone script under\r\nthe name GeoBase.\r\n\r\nIf you use zsh and want to benefit from the *autocomplete*, add this to\r\nyour `~/.zshrc`:\r\n\r\n    # Add custom completion scripts\r\n    fpath=(~/.zsh/completion $fpath)\r\n    autoload -U compinit\r\n    compinit\r\n\r\nThen you may use:\r\n\r\n    % GeoBase ORY CDG\r\n    % GeoBase --closest CDG\r\n    % GeoBase --near LIG\r\n    % GeoBase --fuzzy marseille\r\n    % GeoBase --help\r\n\r\n![image](https://raw.github.com/opentraveldata/geobases/public/examples/GeoBases-CLI.png)\r\n\r\nFrench riviera entries:\r\n\r\n    % GeoBase -E adm1_code -e B8\r\n\r\nSame with programmer-friendly output (csv-like):\r\n\r\n    % GeoBase -E adm1_code -e B8 --quiet --show __ref__ iata_code  name\r\n\r\nAdd a fuzzy name search:\r\n\r\n    % GeoBase -E adm1_code -e B8 --fuzzy sur mer\r\n\r\nAll heliports under 200 km from Paris:\r\n\r\n    % GeoBase --near PAR -N 200 -E location_type -e 'H'\r\n\r\n50 train stations closest to Paris:\r\n\r\n    % GeoBase -E location_type -e R --closest PAR -C 50  --quiet --show iata_code name\r\n\r\nCountries with non-empty postal code regex:\r\n\r\n    % GeoBase -b countries -E postal_code_regex -e \"\" --reverse --quiet\r\n\r\nReading data input on stdin:\r\n\r\n    % echo -e 'ORY^Orly\\nCDG^Charles' |GeoBase\r\n\r\nDisplay on map:\r\n\r\n    % GeoBase -b stations --map\r\n\r\nEurope marker-less map:\r\n\r\n    % GeoBase -E region_code -e EUROP -m -M _ _ country_code  __none__\r\n\r\nIf the previous commands fail, it might be because you PATH does not\r\ninclude the local bin directory, and you installed the package in user\r\nspace:\r\n\r\n    % export PATH=$PATH:$HOME/.local/bin\r\n    % export BACKGROUND_COLOR=black # or 'white', depending on your terminal configuration\r\n\r\nPackaging\r\n---------\r\n\r\nTo create source distribution (pip-installable):\r\n\r\n    % python setup.py sdist --format=zip\r\n\r\nTo create rpm packages:\r\n\r\n    % rm -rf build dist *.egg-info\r\n    % python setup.py bdist_rpm\r\n\r\nThe `MANIFEST.in` file is used to determine which files will be included\r\nin a source distribution.\r\n\r\n`package_data` directive in `setup.py` file is about which file will be\r\nexported in site-package after installation.\r\n\r\nSo you really need both if you want to produce installable packages like\r\nrpms or zip which can be installed afterwards.\r\n\r\nYou will also find a [Rakefile](http://rake.rubyforge.org/) at the\r\nroot of the project. This may be used to build and deploy the packages.\r\nThe Rakefile\r\n\r\nDeployment is done using webdav, and the Rakefile expects `nd` to be\r\ninstalled (this is a webdav client).\r\n\r\nTo install nd, fetch the sources from\r\n[<http://www.gohome.org/nd/>](http://www.gohome.org/nd/). Then compile\r\nand install them. On 64 bits Fedora, you need to install libxml2 before:\r\n\r\n    # yum install libxml2.x86_64 libxml2-devel.x86_64\r\n\r\nAfter nd and rake installation, you may try:\r\n\r\n    % rake\r\n\r\nVirtualenv has bugs on 64 bits systems, if you are using such a system,\r\nyou absolutely need to upgrade to the very last unreleased version of\r\nvirtualenv, before executing rake:\r\n\r\n    % pip uninstall virtualenv\r\n    % pip install --user https://github.com/pypa/virtualenv/tarball/develop"}